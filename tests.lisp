(cl:in-package :cl-maxlib)

(def series test-series
     (a 0 :type integer)
     (b (error "should not happen")
        :type (unsigned-byte 16)))

(def series (test-series2 (:include test-series)) 
     (c 0 :type fixnum))

(stefil:in-root-suite)
(stefil:defsuite* test-series)

(deftest create-empty-series ()
  (let ((series (make-test-series)))
    (is (= 0 (series-length series)))
    (test-series-add series :a 1234 :b 5678)
    (is (typep (test-series-a series)
               '(simple-array fixnum *)))
    (is (typep (test-series-b series)
               '(simple-array (unsigned-byte 16) *)))
    (is (= 1 (series-length series)))
    (is (<= 1 (length (test-series-a series))))
    (is (<= 1 (length (test-series-b series))))
    (is (= 1234
           (with-test-series (series :columns (a))
             a)))
    (is (= 5678
           (with-test-series (series :columns ((b :as b1)))
             b1)))
    (with-test-series (series)
      (incf a)
      (incf b)
      (is (= 1235 a))
      (is (= 5679 b)))
    (test-series-add series :b 20)
    (with-test-series (series :columns (a b))
      (is (= 0 a))
      (is (= 20 b)))))

(deftest test-at ()
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add s :a i :b (+ i 100)))
    (with-test-series (s :at 3)
      (is (= a 3))
      (is (= b 103)))
    s))

(deftest test-at-evaluated-lazily ()
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add s :a i :b (+ i 100)))
    (let ((i 2))
      (with-test-series (s :at (incf i))
        (is (= i 2))
        (is (= a 3))
        (is (= i 3))
        (is (= b 104))
        (is (= i 4))))
    s))

(deftest test-column ()
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add s :a i :b (+ i 100)))
    (with-test-series (s)
      (is (= a 9))
      (is (= b 109)))
    (with-test-series (s :at 8)
      (is (= a 8))
      (is (= b 108)))
    (with-test-series (s :at 7 :columns 
                         ((a :at 6)
                          (b)
                          (b :at 2 :as b2)))
      (is (= a 6))
      (is (= b 107))
      (is (= b2 102)))
    (with-test-series (s :columns ((a :at i)
                                   (a :as a1 :at (1- i))))
      (dotimes (i 10)
        (is a i)
        (when (plusp i)
          (is a1 (1- i)))))
    s))

(deftest test-column-at ()
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add s :a i :b (+ i 100)))
    (let ((i 2))
      (with-test-series (s :at (incf i) :columns 
                           ((a :at (incf i)) 
                            (b :at (incf i))))
        (is (= i 2))
        (is (= a 3))
        (is (= b 104))))
    s))

(deftest test-accessors ()
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add s :a i :b (+ i 100)))
    (with-test-series (s :at 7 :accessors 
                         (a
                          b
                          (b :as b2)))
      (is (= a 7))
      (is (= (b 7) 107))
      (is (= (b2 2) 102))
      (dotimes (i 9)
        (setf (a i) (+ 10 i))
        (setf (b i) (+ 20 i)))
      (multiple-value-bind
            (a1 a2 a3)
          (a 0 1 2)
        (is (= a1 10))
        (is (= a2 11))
        (is (= a3 12))
        (multiple-value-bind
              (b3 b4 b5)
            (b 3 4 5)
          (is (= b3 23))
          (is (= b4 24))
          (is (= b5 25)))))))

(deftest test-values ()
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add s :a i :b (+ i 100)))
    (multiple-value-bind (a b) (test-series-values s) 
      (is (= a 9)) 
      (is (= b 109)))
    (multiple-value-bind (a b) (test-series-values s :at 3) 
      (is (= a 3)) 
      (is (= b 103)))
    (let ((i 5))
      (multiple-value-bind (a b) (test-series-values s :at (incf i))  
        (is (= i 6))
        (is (= a 6)) 
        (is (= b 106))))
    (let ((i 5))
      (destructuring-bind (a b) 
          (test-series-values-as-list s :at (incf i))  
        (is (= i 6))
        (is (= a 6)) 
        (is (= b 106))))))

(deftest test-add-values ()
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add-values s i (+ i 100)))
    (is (= 10 (series-length s)))
    (dotimes (i 10)
      (with-test-series (s :at i)
        (is (= a (+ i)))
        (is (= b (+ i 100)))))))

(deftest test-add-from ()
  (let ((s1 (make-test-series))
        (s2 (make-test-series)))
    (dotimes (i 10)
      (test-series-add s1 :a i :b (+ i 100)))
    (dotimes (i 5)
      (test-series-add-from s2 s1 :at (+ i 3)))
    (is (= 5 (series-length s2)))
    (dotimes (i 5)
      (with-test-series (s2 :at i)
        (is (= a (+ i 3)))
        (is (= b (+ i 103)))))))

(deftest test-iteration () 
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add-values s i (+ i 100)))
    ;; verify its executed once
    (let ((count 0))
      (with-test-series (s)
        (incf count)
        (is (= a 9))
        (is (= b 109)))
      (is (= count 1)))
    ;; verify iteration on whole series
    (let ((count 0))
      (with-test-series (s :from 0)
        (incf count))
      (is (= count (series-length s))))
    ;; verify default :at moves to the current element
    (with-test-series (s :for i :from 0)
      (is (= a i))
      (is (= b (+ i 100))))
    ;; verify :below
    (let ((count 0))
      (with-test-series (s :from 0 :below 5) 
        (incf count))
      (is (= count 5)))
    ;; verify :to
    (let ((count 0))
      (with-test-series (s :from 0 :to 5) 
        (incf count))
      (is (= count 6)))
    ;; verify :for without :from works
    (let ((count 0))
      (with-test-series (s :for i)
        (incf count))
      (is (= count (series-length s))))
    ;; verify maximize
    (let ((max (with-test-series (s :iter i :from 0) 
                 (maximize a))))
      (is (= max 9)))
    (let ((max (with-test-series (s :iter i :from 5) 
                 (minimize a))))
      (is (= max 5)))))

(deftest test-inherit () 
  (let ((s (make-test-series2)))
    (dotimes (i 10)
      (test-series2-add-values s i (+ i 100) (+ i 200)))
    (with-test-series (s :iter i) 
      (is (= a i)) 
      (is (= b (+ i 100))))
    (with-test-series2 (s :iter i) 
      (is (= a i)) 
      (is (= b (+ i 100))) 
      (is (= c (+ i 200))))))

(deftest test-shallow-copy () 
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add-values s i (+ i 100)))
    (with-test-series (s :for i) 
      (is (= a i)) 
      (is (= b (+ i 100))))
    (let ((s2 (series-shallow-copy s)))
      (with-test-series (s2 :for i) 
        (is (= a i)) 
        (is (= b (+ i 100))))
      ;; increment A by 10
      (with-test-series (s :for i)
        (incf a 10))
      ;; verify s is same
      (with-test-series (s :for i) 
        (is (= a (+ i 10))) 
        (is (= b (+ i 100))))
      ;; verify s2 is same
      (with-test-series (s2 :for i) 
        (is (= a (+ i 10))) 
        (is (= b (+ i 100))))))) 

(deftest test-deep-copy () 
  (let ((s (make-test-series)))
    (dotimes (i 10)
      (test-series-add-values s i (+ i 100)))
    (with-test-series (s :for i) 
      (is (= a i)) 
      (is (= b (+ i 100))))
    (let ((s2 (series-deep-copy s)))
      (with-test-series (s2 :for i) 
        (is (= a i)) 
        (is (= b (+ i 100))))
      ;; increment A by 10
      (with-test-series (s :for i)
        (incf a 10))
      ;; verify s is same
      (with-test-series (s :for i) 
        (is (= a (+ i 10))) 
        (is (= b (+ i 100))))
      ;; verify s2 is same
      (with-test-series (s2 :for i) 
        (is (= a i)) 
        (is (= b (+ i 100)))))))
